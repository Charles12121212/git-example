```java
/**
 * @author HaiNiu
 * @description
 * 定义方法，获取一个包含4个字符的验证码，
 * 每一位字符是随机选择的字母和数字，可包含a-z,A-Z,0-9。
 *
 * 1、生成
 *      1、定义一个StringBuilder存储可选的字符
 *      2、随机获取一个索引，获取该索引位置上元素
 *
 * 2、验证
 *      键盘输入一个验证码，不区分大小写。如果输入错误 让验证码刷新
 */
public class Demo01 {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("系统生成的验证码为：");
            String checkCode = getCheckCode();
            System.out.println(checkCode);
            System.out.println("请输入验证码：");
            String code = sc.nextLine();
            // 不区分大小写
            if (code.equalsIgnoreCase(checkCode)) {
                System.out.println("校验通过");
                break;
            } else {
                System.out.println("校验失败");
            }
        }
    }

    public static String getCheckCode() {
//        定义一个StringBuilder存储可选的字符
        StringBuilder builder = new StringBuilder(62);
        // 添加
        for (char i = 'a'; i <= 'z'; i++) {
            builder.append(i);
        }
        for (char i = 'A'; i <= 'Z'; i++) {
            builder.append(i);
        }
        for (char i = '0'; i <= '9'; i++) {
            builder.append(i);
        }
        // System.out.println(builder);
        
        // 随机获取4个
        String result = "";
        Random random = new Random();

        for (int i = 0; i < 4; i++) {
            int index = random.nextInt(builder.length());
            char c = builder.charAt(index);
            result += c;
        }
        
        return result;
    }
```



```java
/*
    // 查找符合要求的数据，要求是 连续的英文字母和空格  最长的子串长度
    hello world             11
    hello world java        16
    hello                    5
    hello world javase       18

    String s = "hello world123hello world java123hi123hello54656hello world javase";
 */
public class Demo02 {
    public static void main(String[] args) {

        String s = "hello123 world123hello world java123hi123hello54656";

        // 1、遍历字符串得到每个字符

        // 2、记录子串的长度（双指针  一个指向子串的开头 一个指向子串的结尾）

        // 3、找到符合要求的子串 与之前的进行比较 记录较长的

        int start = 0; // 定位子串的开始位置
        int end = 0; // 查询子串的结束位置

        int max = 0; // 记录子串长度

        // 结束指针没有到达字符串末尾
        while (end < s.length()) {
            char c = s.charAt(end);
            // 不是 找到了边界
            if (!isCode(c)) {
                // 计算本次查找的子串长度
                int temp = end - start;
                if (temp > max) {
                    max = temp;
                }
                // 下一个子串 的起始位置
                start = end + 1;
            }
            end++;
        }
        // 如果最后一个字符也是符合要求的 单独处理
        if (end == s.length() && isCode(s.charAt(s.length() - 1))) {
            int temp = end - start;
            if (temp > max) {
                max = temp;
            }
        }

        System.out.println(max);

    }

    // 定义方法 判断一个字符是否是英文或空格
    public static boolean isCode(char ch) {
        if (ch >= 'a' && ch <= 'z') {
            return true;
        }
        if (ch >= 'A' && ch <= 'Z') {
            return true;
        }
        if (ch == 32) {
            return true;
        }
        return false;
    }
```

```java
/**
 * @author HaiNiu
 * @description
 *
 * 合并两个升序的数组，要求算法的时间复杂度为 O(n)  遍历一遍
 *
 * 1 1 2 5 8 9
 * 3 5 5 6 7 7
 *
 */
public class Demo03 {

    public static void main(String[] args) {

        int[] a = {1, 1, 2, 5, 8, 9};
        int[] b = {3, 5, 5, 6, 7};

        int[] result = merge(a, b);

        System.out.println(Arrays.toString(result));
    }

    public static int[] merge(int[] a, int[] b) {
        // 定义数组存储结果
        int[] result = new int[a.length + b.length];
        // a数组的索引
        int left = 0;
        // b数组的索引
        int right = 0;
        // 结果数组的索引
        int index = 0;

        // 循环拷贝
        while (left < a.length && right < b.length) {
            if (a[left] < b[right]) {
                result[index++] = a[left++];
            } else {
                result[index++] = b[right++];
            }
        }
        // 判断 没有拷贝完的数组 剩余的元素继续拷贝
        while (left < a.length) {
            result[index++] = a[left++];
        }
        while (right < b.length) {
            result[index++] = b[right++];
        }
        return result;
    }
```

```java
/**
 * @author HaiNiu
 * @description 韩国, 荷兰, 厄瓜多尔, 威尔士, 美国, 墨西哥, 丹麦, 德国, 克罗地亚, ,
 * 澳大利亚,乌拉圭,卡塔尔,英格兰,哥斯达黎加,加拿大
 * <p>
 * 16支随机分成四个组。
 * <p>
 * Collections
 * public static boolean addAll(Collection c, T... elements)
 * 可变参数：参数的类型相同，但个数不确定
 */
public static void main(String[] args) {
    // 存储到集合中
    ArrayList<String> list = new ArrayList<>();

    Collections.addAll(list,
            "中国", "荷兰", "厄瓜多尔",
            "威尔士", "美国", "墨西哥", "丹麦", "德国",
            "克罗地亚", "沙特", "澳大利亚", "乌拉圭",
            "卡塔尔", "英格兰", "哥斯达黎加", "加拿大");

    Random random = new Random();

    // 随机抽取
    for (int i = 0; i < 4; i++) {
        System.out.println("第" + (i + 1) + "组的成员如下：");
        // 每个组抽取4次
        for (int j = 0; j < 4; j++) {
            int index = random.nextInt(list.size());
            // 抽到谁 删除
            String s = list.remove(index);
            System.out.println(s);
        }
    }
}
```

```java
  /*
    ArrayList<String> list = new ArrayList<String>();

    Collections.addAll(list, "hello", "world", "java", "javase", "bigdata", "mysql");

    System.out.println(list);

    Collections.shuffle(list);

    System.out.println(list);
    */

    // 模拟发牌
    // 创建一副扑克
    ArrayList<String> list = new ArrayList<>();

    String[] color = {"黑桃", "红桃", "梅花", "方片"};
    String[] num = {"A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"};

    for (String s : color) {
        for (String n : num) {
            list.add(s + n);
        }
    }
    list.add("小王");
    list.add("大王");

    // System.out.println(list);

    // 洗牌
    Collections.shuffle(list);

    // 发牌  每人发17张  留3张底牌
    ArrayList<String> gaojin = new ArrayList<>();
    ArrayList<String> longwu = new ArrayList<>();
    ArrayList<String> afa = new ArrayList<>();


    for (int i = 0; i < list.size() - 3; i++) {
        if (i % 3 == 0) {
            gaojin.add(list.get(i));
        } else if (i % 3 == 1) {
            longwu.add(list.get(i));
        } else {
            afa.add(list.get(i));
        }
    }

    // 查看结果
    System.out.println("高进的牌：");
    gaojin.forEach(s -> System.out.print(s + "  "));
    System.out.println();
    System.out.println("龙五的牌：");
    longwu.forEach(s -> System.out.print(s+ "  "));
    System.out.println();
    System.out.println("发哥的牌：");
    afa.forEach(s -> System.out.print(s+ "  "));
    System.out.println();

    System.out.println("底牌：");
    for (int i = list.size() - 3; i < list.size(); i++) {
        System.out.println(list.get(i));
    }

}
```

```java

/*
这题不会可以保留
一段文本中，假设表达式中允许包含三种括号：()、[]和{}。
对于表达式中的其他符号，无需考虑，本例中采用点替代。
但对于表达式中的括号必须正确的配对并且正确的嵌套，即括号必须左右呼应，可以相互包含，但不能交叉。

例如：
..(..[..]..).. 是允许的
..(...[...)....].... 是禁止的

对于主方法中的测试用例，应该返回如下结果：
false
true
false
false
请编写一个算法判断表达式中的括号是否正确配对。

栈

 */
public class Demo06 {
    public static void main(String[] args) {
        // 校验括号是否正确的配对并且正确嵌套
        /*
        System.out.println(isGoodBracket("...(..[.)..].{.(..).}..."));
        System.out.println(isGoodBracket("...(..[...].(.).).{.(..).}..."));
        System.out.println(isGoodBracket(".....[...].(.).){.(..).}..."));
        System.out.println(isGoodBracket("...(..[...].(.).){.(..)...."));
        */
    }
}
```

```
 * @description 校验QQ号
 */
public class Demo01 {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        String regex = "[1-9]\\d{4,14}";

        for (int x = 0; x < 5; x++) {
            System.out.println("请输入QQ号码：");

            String qq = sc.nextLine();

            // System.out.println(check(qq));
            System.out.println(qq.matches(regex));
        }

    }


    // 判断每一种错误的情况
    public static boolean check(String qq) {
        // 5 ~ 15 数字  首位不能是0
        if (qq == null) {
            return false;
        }
        if (qq.length() < 5 || qq.length() > 15) {
            return false;
        }
        if (qq.startsWith("0")) {
            return false;
        }
        // 判断每一位
        for (int i = 0; i < qq.length(); i++) {
            char c = qq.charAt(i);
            if (c < '0' || c > '9') {
                return false;
            }
        }
        return true;
    }
}
```

```java
public static void main(String[] args) {

    String str = "张三的电话号码是：13877778888，李四的电话号码是：13966669999，王五的电话号码是：18898765432。";

    // 脱敏  把手机号全部覆盖为****
    String regex = "1[3|5-9]\\d{9}";

    String s = str.replaceAll(regex, "****");
    System.out.println(s);

}
```



